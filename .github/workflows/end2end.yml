name: end to end tests
on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
jobs:
  e2e:
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
    runs-on: ubuntu-latest
    env:
      ORCHESTRATOR_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres?sslmode=disable
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: build-${{ hashFiles('**/go.sum') }}
      - name: Install protobuf codegen tool
        run: |
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.18.1/protoc-3.18.1-linux-x86_64.zip
          unzip protoc-3.18.1-linux-x86_64.zip -d $HOME/.local
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install go tools
        run: |
          cd /tmp
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.27.1
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2.0
          go install github.com/go-bindata/go-bindata/...@v3.1.2
      - name: Install db migration tool
        run: |
          wget -qO- https://github.com/golang-migrate/migrate/releases/download/v4.15.1/migrate.linux-amd64.tar.gz | tar xzf - -C $HOME/.local/bin
      - name: build orchestrator
        run: make orchestrator
      - name: wait for rabbitmq
        # We don't explicitly wait for postgres since it will almost certainly come up before rabbit
        run: |
          while ! $(nc localhost 5672 -z); do
            sleep 2
          done
        timeout-minutes: 1
      - name: migrate db
        run: |
          migrate -source file://./server/standalone/migration/ -database "${ORCHESTRATOR_DATABASE_URL}" up
      - name: setup channel configuration
        run: |
          cat << EOF > ${{runner.temp}}/config.yaml
          ---
          channels:
            mychannel:
              - MyOrg1MSP
              - MyOrg2MSP
            yourchannel:
              - MyOrg1MSP
              - MyOrg2MSP
          EOF
      - name: run e2e tests
        run: |
          ./bin/orchestrator > server.log 2>&1 &
          go test -tags=e2e ./e2e -v -short --failfast -server_addr localhost:9000
        env:
          LOG_LEVEL: DEBUG
          NO_COLOR: true
          ORCHESTRATOR_TLS_ENABLED: false
          ORCHESTRATOR_MODE: standalone
          ORCHESTRATOR_AMQP_DSN: amqp://guest:guest@localhost:5672/
          ORCHESTRATOR_VERIFY_CLIENT_MSP_ID: false
          ORCHESTRATOR_CHANNEL_CONFIG: ${{runner.temp}}/config.yaml
          ORCHESTRATOR_TX_RETRY_BUDGET: 500ms
      - name: Archive server log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: server-log
          path: server.log
