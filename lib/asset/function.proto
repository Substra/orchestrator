syntax = "proto3";

package orchestrator;

import "google/protobuf/timestamp.proto";
import "common.proto";

option go_package = "github.com/substra/orchestrator/lib/asset";

message FunctionInput {
  AssetKind kind = 1;
  bool multiple = 2;
  bool optional = 3;
}

message FunctionOutput {
  AssetKind kind = 1;
  bool multiple = 2;
}

enum FunctionAction {
  FUNCTION_ACTION_UNKNOWN = 0;
  FUNCTION_ACTION_BUILDING = 1;
  FUNCTION_ACTION_CANCELED = 2;
  FUNCTION_ACTION_FAILED = 3;
  FUNCTION_ACTION_READY = 4;
}

enum FunctionStatus {
    FUNCTION_STATUS_UNKNOWN = 0;
    FUNCTION_STATUS_WAITING = 1;
    FUNCTION_STATUS_BUILDING = 2;
    FUNCTION_STATUS_READY = 3;
    FUNCTION_STATUS_CANCELED = 4;
    FUNCTION_STATUS_FAILED = 5;
}

// Function represents the code which will be used
// to produce or test a model.
message Function {
  reserved 3;
  reserved "category";

  string key = 1;
  string name = 2;
  Addressable description = 4;
  Addressable function = 5;
  Permissions permissions = 6;
  string owner = 7;
  google.protobuf.Timestamp creation_date = 8;
  map<string, string> metadata = 16;
  map<string, FunctionInput> inputs = 17;
  map<string, FunctionOutput> outputs = 18;
  FunctionStatus status = 19;
}

// NewFunction is used to register an Function.
// It will be processed into an Function.
message NewFunction {
  reserved 3;
  reserved "category";

  string key = 1;
  string name = 2;
  Addressable description = 4;
  Addressable function = 5;
  NewPermissions new_permissions = 6;
  map<string, string> metadata = 17;
  map<string, FunctionInput> inputs = 18;
  map<string, FunctionOutput> outputs = 19;
}

message GetFunctionParam {
  string key = 1;
}

message QueryFunctionsResponse {
  repeated Function Functions = 1;
  string next_page_token = 2;
}

message FunctionQueryFilter {
  string compute_plan_key = 2;
}

message QueryFunctionsParam {
  string page_token = 1;
  uint32 page_size = 2;
  FunctionQueryFilter filter = 3;
}

message UpdateFunctionParam {
  string key = 1;
  string name = 2;
}

message UpdateFunctionResponse {}

service FunctionService {
  rpc RegisterFunction(NewFunction) returns (Function);
  rpc GetFunction(GetFunctionParam) returns (Function);
  rpc QueryFunctions(QueryFunctionsParam) returns (QueryFunctionsResponse);
  rpc UpdateFunction(UpdateFunctionParam) returns (UpdateFunctionResponse);
  rpc ApplyFunctionAction(ApplyFunctionActionParam) returns (ApplyFunctionActionResponse);

}

message ApplyFunctionActionParam {
  string function_key = 1;
  FunctionAction action = 2;
}

message ApplyFunctionActionResponse {}