syntax = "proto3";

package orchestrator;

option go_package = "github.com/substra/orchestrator/lib/asset";

import "google/protobuf/timestamp.proto";
import "common.proto";

// ErrorType defines the types of errors that can occur in a compute task.
enum ErrorType {
  ERROR_TYPE_UNSPECIFIED = 0;

  // An ERROR_TYPE_BUILD is an error occurring during the build of the container image.
  // It is likely to be caused by the user's code.
  ERROR_TYPE_BUILD = 1;

  // An ERROR_TYPE_EXECUTION is an error occurring during the execution of the function/metric container.
  // It is likely to be caused by the user's code.
  ERROR_TYPE_EXECUTION = 2;

  // An ERROR_TYPE_INTERNAL describes any other error that does not fall into the previous categories.
  // It is likely to be caused by a fault in the system. It would require the action of a system administrator.
  ERROR_TYPE_INTERNAL = 3;
}

enum FailedAssetKind {
    FAILED_ASSET_UNKNOWN = 0;
    FAILED_ASSET_COMPUTE_TASK = 1;
    FAILED_ASSET_FUNCTION = 2;
}

// FailureReport is used to store information related to a failed ComputeTask.
message FailureReport {
  string asset_key = 1;
  ErrorType error_type = 2;
  Addressable logs_address = 3;
  google.protobuf.Timestamp creation_date = 4;
  // In the case of a compute task fialure, the owner of a failure report matches the 'worker' field of the associated compute task but can differ from
  // the owner of the compute task. Indeed, a task belonging to some user can be executed on an organization belonging
  // to another user.
  // In the case of a function, the owner will be the owner of the function (which builds the function).
  // The failure report generated will be located on the execution organization and belong to the owner
  // of this organization.
  string owner = 5;
  FailedAssetKind asset_type = 6;
}

// NewFailureReport is used to register a FailureReport.
// It will be processed into a FailureReport.
message NewFailureReport {
  string asset_key = 1;
  ErrorType error_type = 2;
  Addressable logs_address = 3;
  FailedAssetKind asset_type = 4;
}

// GetFailureReportParam is used to fetch a Failure.
message GetFailureReportParam {
  string asset_key = 1;
}

service FailureReportService {
  rpc RegisterFailureReport(NewFailureReport) returns (FailureReport);
  rpc GetFailureReport(GetFailureReportParam) returns (FailureReport);
}
