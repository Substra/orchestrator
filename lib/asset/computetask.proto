syntax = "proto3";

package orchestrator;

import "algo.proto";
import "common.proto";

option go_package = "github.com/owkin/orchestrator/lib/asset";

enum ComputeTaskCategory {
  TASK_UNKNOWN = 0;
  TASK_TRAIN = 1;
  TASK_AGGREGATE = 2;
  TASK_COMPOSITE = 3;
  TASK_TEST = 4;
}

enum ComputeTaskStatus {
  STATUS_UNKNOWN = 0;
  STATUS_WAITING = 1;
  STATUS_TODO = 2;
  STATUS_DOING = 3;
  STATUS_DONE = 4;
  STATUS_CANCELED = 5;
  STATUS_FAILED = 6;
}

// ComputeTask is a computation step in a ComputePlan.
// It was previously called XXXtuple: Traintuple, CompositeTraintuple, etc
message ComputeTask {
  string key = 1;
  ComputeTaskCategory category = 2;
  Algo algo = 3;
  string owner = 4;
  string compute_plan_key = 5;
  // Keys of parent ComputeTasks
  repeated string parent_task_keys = 6;
  int32 rank = 7;
  ComputeTaskStatus status = 8; // mutable
  string worker = 9;
  oneof data {
    TestTaskData test = 12;
    TrainTaskData train = 13;
    CompositeTrainTaskData composite = 14;
    AggregateTrainTaskData aggregate = 15;
  }
  map<string, string> metadata = 16;
}

message NewComputeTask {
  string key = 1;
  ComputeTaskCategory category = 2;
  string algo_key = 3;
  string compute_plan_key = 4;
  // Keys of parent ComputeTasks
  repeated string parent_task_keys = 5;
  oneof data {
    NewTestTaskData test = 12;
    NewTrainTaskData train = 13;
    NewCompositeTrainTaskData composite = 14;
    NewAggregateTrainTaskData aggregate = 15;
  }
  map<string, string> metadata = 16;
}

message TrainTaskData {
  string data_manager_key = 1;
  repeated string data_sample_keys = 2;
  Permissions model_permissions = 4;
}

message NewTrainTaskData {
  string data_manager_key = 1;
  repeated string data_sample_keys = 2;
}

message TestTaskData {
  string data_manager_key = 1;
  repeated string data_sample_keys = 2;
  string objective_key = 3;
  bool certified = 4;
}

message NewTestTaskData {
  // If NewTestTaskData has datasamples, the results will not be certified and
  // the objective will be evaluated on this new dataset (not the objective dataset)
  string data_manager_key = 1;
  repeated string data_sample_keys = 2;
  string objective_key = 3;
}

message CompositeTrainTaskData {
  string data_manager_key = 1;
  repeated string data_sample_keys = 2;
  Permissions head_permissions = 5;
  Permissions trunk_permissions = 6;
}

message NewCompositeTrainTaskData {
  string data_manager_key = 1;
  repeated string data_sample_keys = 2;
  NewPermissions trunk_permissions = 4;
}

message AggregateTrainTaskData {
  Permissions model_permissions = 2;
}

message NewAggregateTrainTaskData {
  string worker = 2;
}

message RegisterTasksParam {
  repeated NewComputeTask tasks = 1;
}


// Do not returns anything on multiple tasks registration
message RegisterTasksResponse {}

message TaskQueryFilter {
  string worker = 1;
  ComputeTaskStatus status = 2;
  ComputeTaskCategory category = 3;
  string compute_plan_key = 4;
  string algo_key = 5;
}

message QueryTasksParam {
  string page_token = 1;
  uint32 page_size = 2;
  TaskQueryFilter filter = 3;
}

message QueryTasksResponse {
  repeated ComputeTask tasks = 1;
  string next_page_token = 2;
}

message GetTaskParam {
  string key = 1;
}

enum ComputeTaskAction {
  TASK_ACTION_UNKNOWN = 0;
  TASK_ACTION_DOING = 1;
  TASK_ACTION_CANCELED = 2;
  TASK_ACTION_FAILED = 3;
}

message ApplyTaskActionParam {
  string compute_task_key = 1;
  ComputeTaskAction action = 2;
  string log = 3;
}

message ApplyTaskActionResponse {
}

service ComputeTaskService {
  rpc RegisterTasks(RegisterTasksParam) returns (RegisterTasksResponse) {}
  rpc QueryTasks(QueryTasksParam) returns (QueryTasksResponse) {}
  rpc GetTask(GetTaskParam) returns (ComputeTask) {}
  rpc ApplyTaskAction(ApplyTaskActionParam) returns (ApplyTaskActionResponse) {}
}
