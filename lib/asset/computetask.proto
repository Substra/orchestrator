syntax = "proto3";

package orchestrator;

import "google/protobuf/timestamp.proto";
import "model.proto";
import "datamanager.proto";
import "datasample.proto";
import "common.proto";

option go_package = "github.com/substra/orchestrator/lib/asset";

enum ComputeTaskStatus {
  STATUS_UNKNOWN = 0;
  STATUS_WAITING_FOR_PARENT_TASKS = 1;
  STATUS_WAITING_FOR_EXECUTOR_SLOT = 2;
  STATUS_DOING = 3;
  STATUS_DONE = 4;
  STATUS_CANCELED = 5;
  STATUS_FAILED = 6;
  STATUS_WAITING_FOR_BUILDER_SLOT = 7;
  STATUS_BUILDING = 8;
}

message ParentTaskOutputRef {
  string parent_task_key = 1;
  string output_identifier = 2;
}

message ComputeTaskInput {
  string identifier = 1;
  oneof ref {
    string asset_key = 2;
    ParentTaskOutputRef parent_task_output = 3;
  }
}

message ComputeTaskOutput {
  Permissions permissions = 1;
  bool transient = 2;
}

message NewComputeTaskOutput {
  NewPermissions permissions = 1;
  bool transient = 2;
}


// ComputeTask is a computation step in a ComputePlan.
// It was previously called XXXtuple: Traintuple, CompositeTraintuple, etc
message ComputeTask {
  reserved 2, 3, 6, 12, 13, 14, 15, 18;
  reserved "category", "function", "data", "test", "train", "composite", "aggregate", "parent_task_keys", "predict";

  string key = 1;
  string owner = 4;
  string compute_plan_key = 5;
  int32 rank = 7;
  ComputeTaskStatus status = 8; // mutable
  string worker = 9;
  google.protobuf.Timestamp creation_date = 10;
  Permission logs_permission = 11;
  map<string, string> metadata = 16;
  repeated ComputeTaskInput inputs = 17;
  map<string, ComputeTaskOutput> outputs = 19;
  string function_key = 20;
}

message NewComputeTask {
  reserved 2, 5, 12, 13, 14, 15, 18;
  reserved "category", "parent_task_keys", "data", "test", "train", "composite", "aggregate", "predict";

  string key = 1;
  string function_key = 3;
  string compute_plan_key = 4;
  string worker = 6;
  map<string, string> metadata = 16;
  repeated ComputeTaskInput inputs = 17;
  map<string, NewComputeTaskOutput> outputs = 19;
}

message RegisterTasksParam {
  repeated NewComputeTask tasks = 1;
}

message RegisterTasksResponse {
    repeated ComputeTask tasks = 1;
}

message TaskQueryFilter {
  reserved 3;
  reserved "category";

  string worker = 1;
  ComputeTaskStatus status = 2;
  string compute_plan_key = 4;
  string function_key = 5;
}

message QueryTasksParam {
  string page_token = 1;
  uint32 page_size = 2;
  TaskQueryFilter filter = 3;
}

message QueryTasksResponse {
  repeated ComputeTask tasks = 1;
  string next_page_token = 2;
}

message GetTaskParam {
  string key = 1;
}

enum ComputeTaskAction {
  TASK_ACTION_UNKNOWN = 0;
  TASK_ACTION_DOING = 1;
  TASK_ACTION_CANCELED = 2;
  TASK_ACTION_FAILED = 3;
  TASK_ACTION_DONE = 4;
}

// ComputeTaskOutputAsset links an asset to a task output.
// It is not exposed through gRPC methods, but will be sent as event.
message ComputeTaskOutputAsset {
  string compute_task_key = 1;
  string compute_task_output_identifier = 2;
  AssetKind asset_kind = 3;
  string asset_key = 4;
}

message ApplyTaskActionParam {
  string compute_task_key = 1;
  ComputeTaskAction action = 2;
  string log = 3;
}

message ApplyTaskActionResponse {}

message ComputeTaskInputAsset {
  string identifier = 1;
  oneof asset {
    Model model = 2;
    DataManager data_manager = 3;
    DataSample data_sample = 4;
  }
}

message GetTaskInputAssetsParam {
  string compute_task_key = 1;
}

message GetTaskInputAssetsResponse {
  repeated ComputeTaskInputAsset assets = 1;
}

message DisableOutputParam {
  string compute_task_key = 1;
  string identifier = 2;
}

message DisableOutputResponse {}

service ComputeTaskService {
  rpc RegisterTasks(RegisterTasksParam) returns (RegisterTasksResponse);
  rpc QueryTasks(QueryTasksParam) returns (QueryTasksResponse);
  rpc GetTask(GetTaskParam) returns (ComputeTask);
  rpc ApplyTaskAction(ApplyTaskActionParam) returns (ApplyTaskActionResponse);
  rpc GetTaskInputAssets(GetTaskInputAssetsParam) returns (GetTaskInputAssetsResponse);
  rpc DisableOutput(DisableOutputParam) returns (DisableOutputResponse);
}
