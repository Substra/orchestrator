syntax = "proto3";

package orchestrator;

import "function.proto";
import "common.proto";
import "computeplan.proto";
import "computetask.proto";
import "datamanager.proto";
import "datasample.proto";
import "failure_report.proto";
import "model.proto";
import "organization.proto";
import "performance.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/substra/orchestrator/lib/asset";

enum EventKind {
  EVENT_UNKNOWN = 0;
  EVENT_ASSET_CREATED = 1;
  EVENT_ASSET_UPDATED = 2;
  EVENT_ASSET_DISABLED = 3;
}

// Event is an occurrence of an orchestration event.
// It is triggered during orchestration and allows a consumer to react to the orchestration process.
message Event {
  string id = 1;
  string asset_key = 2;
  AssetKind asset_kind = 3;
  EventKind event_kind = 4;
  string channel = 5;
  google.protobuf.Timestamp timestamp = 6;
  oneof asset {
    Function function = 7;
    ComputePlan compute_plan = 8;
    ComputeTask compute_task = 9;
    DataManager data_manager = 10;
    DataSample data_sample = 11;
    FailureReport failure_report = 12;
    Model model = 13;
    Organization organization = 14;
    Performance performance = 15;
    ComputeTaskOutputAsset compute_task_output_asset = 16;
  }
  map<string, string> metadata = 18;
}

message QueryEventsParam {
  string page_token = 1;
  uint32 page_size = 2;
  EventQueryFilter filter = 3;
  SortOrder sort = 4;
}

message EventQueryFilter {
  string asset_key = 1;
  AssetKind asset_kind = 2;
  EventKind event_kind = 3;
  map<string, string> metadata = 4;
  google.protobuf.Timestamp start = 5; // timestamp inclusive lower bound
  google.protobuf.Timestamp end = 6; // timestamp inclusive upper bound
}

message QueryEventsResponse {
  repeated Event events = 1;
  string next_page_token = 2;
}

message SubscribeToEventsParam {
  // Start streaming events from this ID (excluding)
  string start_event_id = 1;
}


service EventService {
  rpc QueryEvents(QueryEventsParam) returns (QueryEventsResponse);
  rpc SubscribeToEvents(SubscribeToEventsParam) returns (stream Event);
}
