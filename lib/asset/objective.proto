// Copyright 2020 Owkin Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package orchestrator;

import "common.proto";

option go_package = "github.com/owkin/orchestrator/lib/asset";

// Objective represents the hypothesis against which a model is trained and evaluated.
message Objective {
  string key = 1;
  string name = 2;
  string data_manager_key = 3;
  repeated string data_sample_keys = 4;
  Addressable description = 5;
  string metrics_name = 6;
  Addressable metrics = 7;
  Permissions permissions = 8;
  map<string, string> metadata = 9;
  string owner = 10;
}

// NewObjective is used to register an Objective.
// It will be processed into an Objective.
message NewObjective {
  string key = 1;
  string name = 2;
  string data_manager_key = 3;
  repeated string data_sample_keys = 4;
  Addressable description = 5;
  string metrics_name = 6;
  Addressable metrics = 7;
  NewPermissions new_permissions = 8;
  map<string, string> metadata = 9;
}

message ObjectiveQueryParam {
  string key = 1;
}

message ObjectivesQueryResponse {
  repeated Objective objectives = 1;
  string next_page_token = 2;
}

message ObjectivesQueryParam {
  string page_token = 1;
  uint32 page_size = 2;
}

message LeaderboardQueryParam {
  string objective_key = 1;
  SortOrder sort_order = 2;
}

// This will probably live somewhere else once we implement test tuple assets
message BoardTuple {
  string algo = 1;
  string creator = 2;
  string key = 3;
  string traintuple_key = 4;
  float perf = 5;
  string tag = 6;
}

message Leaderboard {
  Objective objective = 1;
  repeated BoardTuple test_tuples = 2;
}

service ObjectiveService {
  rpc RegisterObjective(NewObjective) returns (Objective) {}
  rpc QueryObjective(ObjectiveQueryParam) returns (Objective) {}
  rpc QueryObjectives(ObjectivesQueryParam) returns (ObjectivesQueryResponse) {}
  rpc GetLeaderboard(LeaderboardQueryParam) returns (Leaderboard) {}
}
