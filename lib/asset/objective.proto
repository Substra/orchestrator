syntax = "proto3";

package orchestrator;

import "common.proto";
import "algo.proto";

option go_package = "github.com/owkin/orchestrator/lib/asset";

// Objective represents the hypothesis against which a model is trained and evaluated.
message Objective {
  string key = 1;
  string name = 2;
  string data_manager_key = 3;
  repeated string data_sample_keys = 4;
  Addressable description = 5;
  string metrics_name = 6;
  Addressable metrics = 7;
  Permissions permissions = 8;
  map<string, string> metadata = 9;
  string owner = 10;
}

// NewObjective is used to register an Objective.
// It will be processed into an Objective.
message NewObjective {
  string key = 1;
  string name = 2;
  string data_manager_key = 3;
  repeated string data_sample_keys = 4;
  Addressable description = 5;
  string metrics_name = 6;
  Addressable metrics = 7;
  NewPermissions new_permissions = 8;
  map<string, string> metadata = 9;
}

message GetObjectiveParam {
  string key = 1;
}

message QueryObjectivesResponse {
  repeated Objective objectives = 1;
  string next_page_token = 2;
}

message QueryObjectivesParam {
  string page_token = 1;
  uint32 page_size = 2;
}

message LeaderboardQueryParam {
  string objective_key = 1;
  SortOrder sort_order = 2;
}

message BoardItem {
  Algo algo = 1;
  string objective_key = 3;
  string compute_task_key = 4;
  float perf = 5;
}

message Leaderboard {
  Objective objective = 1;
  repeated BoardItem board_items = 2;
}

service ObjectiveService {
  rpc RegisterObjective(NewObjective) returns (Objective) {}
  rpc GetObjective(GetObjectiveParam) returns (Objective) {}
  rpc QueryObjectives(QueryObjectivesParam) returns (QueryObjectivesResponse) {}
  rpc GetLeaderboard(LeaderboardQueryParam) returns (Leaderboard) {}
}
