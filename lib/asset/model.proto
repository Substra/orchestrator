syntax = "proto3";

package orchestrator;

option go_package = "github.com/substra/orchestrator/lib/asset";

import "google/protobuf/timestamp.proto";
import "common.proto";

enum ModelCategory {
  MODEL_UNKNOWN = 0;
  MODEL_SIMPLE = 1;
  MODEL_HEAD = 2;
}

message Model {
  string key = 1;
  ModelCategory category = 2;
  string compute_task_key = 3;
  Addressable address = 4;
  Permissions permissions = 5;
  string owner = 6;
  google.protobuf.Timestamp creation_date = 7;
}

message NewModel {
  string key = 1;
  ModelCategory category = 2;
  string compute_task_key = 3;
  string compute_task_output_identifier = 5;
  Addressable address = 4;
}

message RegisterModelsParam {
  repeated NewModel models = 1;
}

message RegisterModelsResponse {
  repeated Model models = 1;
}

message GetComputeTaskModelsParam {
  string compute_task_key = 1;
}

message GetComputeTaskModelsResponse {
  repeated Model models = 1;
}

message CanDisableModelParam {
  string model_key = 1;
}

message CanDisableModelResponse {
  bool can_disable = 1;
}

message DisableModelParam {
  string model_key = 1;
}

message GetModelParam {
  string key = 1;
}

message DisableModelResponse {}

service ModelService {
  rpc RegisterModel(NewModel) returns (Model) {
    option deprecated = true;
  };
  rpc RegisterModels(RegisterModelsParam) returns (RegisterModelsResponse);
  rpc GetModel(GetModelParam) returns (Model);
  rpc GetComputeTaskOutputModels(GetComputeTaskModelsParam) returns (GetComputeTaskModelsResponse);
  rpc CanDisableModel(CanDisableModelParam) returns (CanDisableModelResponse);
  rpc DisableModel(DisableModelParam) returns (DisableModelResponse);
}
