syntax = "proto3";

package orchestrator;

option go_package = "github.com/substra/orchestrator/lib/asset";

import "google/protobuf/timestamp.proto";

message ComputePlan {
  reserved 8, 9, 10, 11, 12, 3, 4, 5;
  reserved "waiting_count", "todo_count", "doing_count", "canceled_count", "failed_count", "done_count", "task_count", "status";

  string key = 1;
  string owner = 2;
  bool delete_intermediary_models = 6;
  google.protobuf.Timestamp creation_date = 7;
  string tag = 16;
  string name = 19;
  map<string, string> metadata = 17;
  google.protobuf.Timestamp cancelation_date = 18;
  google.protobuf.Timestamp failure_date = 20;
}

message NewComputePlan {
  string key = 1;
  string tag = 16;
  string name = 19;
  map<string, string> metadata = 17;
  bool delete_intermediary_models = 18;
}

message GetComputePlanParam {
  string key = 1;
}

enum ComputePlanAction {
  PLAN_ACTION_UNKNOWN = 0;
  PLAN_ACTION_CANCELED = 1;
}

message ApplyPlanActionParam {
  string key = 1;
  ComputePlanAction action = 2;
}

message ApplyPlanActionResponse {}

message PlanQueryFilter {
  string owner = 1;
}

message QueryPlansParam {
  string page_token = 1;
  uint32 page_size = 2;
  PlanQueryFilter filter = 3;
}

message QueryPlansResponse {
  repeated ComputePlan plans = 1;
  string next_page_token = 2;
}

message UpdateComputePlanParam {
  string key = 1;
  string name = 2;
}

message UpdateComputePlanResponse {}

message IsPlanRunningParam {
  string key = 1;
}

message IsPlanRunningResponse {
  bool is_running = 1;
}

service ComputePlanService {
  rpc RegisterPlan(NewComputePlan) returns (ComputePlan);
  rpc GetPlan(GetComputePlanParam) returns (ComputePlan);
  rpc ApplyPlanAction(ApplyPlanActionParam) returns (ApplyPlanActionResponse);
  rpc QueryPlans(QueryPlansParam) returns (QueryPlansResponse);
  rpc UpdatePlan(UpdateComputePlanParam) returns (UpdateComputePlanResponse);
  rpc IsPlanRunning(IsPlanRunningParam) returns (IsPlanRunningResponse);
}
