// Copyright 2021 Owkin Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package orchestrator;

option go_package = "github.com/owkin/orchestrator/lib/asset";

enum ComputePlanStatus {
  PLAN_STATUS_UNKNOWN = 0;
  PLAN_STATUS_WAITING = 1;
  PLAN_STATUS_TODO = 2;
  PLAN_STATUS_DOING = 3;
  PLAN_STATUS_DONE = 4;
  PLAN_STATUS_CANCELED = 5;
  PLAN_STATUS_FAILED = 6;
}

message ComputePlan {
  string key = 1;
  string tag = 2;
  string owner = 3;
  map<string, string> metadata = 4;
  uint32 done_count = 5; // Dynamic data, not persisted and set on query
  uint32 task_count = 6; // Dynamic data, not persisted and set on query
  ComputePlanStatus status = 8; // Dynamic data, not persisted and set on query
  bool delete_intermediary_models = 7;
}

message NewComputePlan {
  string key = 1;
  string tag = 2;
  map<string, string> metadata = 3;
  bool delete_intermediary_models = 4;
}

message GetComputePlanParam {
  string key = 1;
}

enum ComputePlanAction {
  PLAN_ACTION_UNKNOWN = 0;
  PLAN_ACTION_CANCELED = 1;
}

message ApplyPlanActionParam {
  string key = 1;
  ComputePlanAction action = 2;
}

message ApplyPlanActionResponse {}

message QueryPlansParam {
  string page_token = 1;
  uint32 page_size = 2;
  // TODO: filters?
}

message QueryPlansResponse {
  repeated ComputePlan plans = 1;
  string next_page_token = 2;
}

service ComputePlanService {
  rpc RegisterPlan(NewComputePlan) returns (ComputePlan) {}
  rpc GetPlan(GetComputePlanParam) returns (ComputePlan) {}
  rpc ApplyPlanAction(ApplyPlanActionParam) returns (ApplyPlanActionResponse) {}
  rpc QueryPlans(QueryPlansParam) returns (QueryPlansResponse) {}
}
