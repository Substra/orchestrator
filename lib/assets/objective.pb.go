// Copyright 2020 Owkin Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: objective.proto

package assets

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Objective represents the hypothesis against which a model is trained and evaluated.
type Objective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TestDataset *Dataset          `protobuf:"bytes,3,opt,name=test_dataset,json=testDataset,proto3" json:"test_dataset,omitempty"`
	Description *Addressable      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MetricsName string            `protobuf:"bytes,5,opt,name=metrics_name,json=metricsName,proto3" json:"metrics_name,omitempty"`
	Metrics     *Addressable      `protobuf:"bytes,6,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Permissions *Permissions      `protobuf:"bytes,7,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Owner       string            `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *Objective) Reset() {
	*x = Objective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objective_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Objective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Objective) ProtoMessage() {}

func (x *Objective) ProtoReflect() protoreflect.Message {
	mi := &file_objective_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Objective.ProtoReflect.Descriptor instead.
func (*Objective) Descriptor() ([]byte, []int) {
	return file_objective_proto_rawDescGZIP(), []int{0}
}

func (x *Objective) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Objective) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Objective) GetTestDataset() *Dataset {
	if x != nil {
		return x.TestDataset
	}
	return nil
}

func (x *Objective) GetDescription() *Addressable {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Objective) GetMetricsName() string {
	if x != nil {
		return x.MetricsName
	}
	return ""
}

func (x *Objective) GetMetrics() *Addressable {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Objective) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Objective) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Objective) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// NewObjective is used to register an Objective.
// It will be processed into an Objective.
type NewObjective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TestDataset    *Dataset          `protobuf:"bytes,3,opt,name=test_dataset,json=testDataset,proto3" json:"test_dataset,omitempty"`
	Description    *Addressable      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MetricsName    string            `protobuf:"bytes,5,opt,name=metrics_name,json=metricsName,proto3" json:"metrics_name,omitempty"`
	Metrics        *Addressable      `protobuf:"bytes,6,opt,name=metrics,proto3" json:"metrics,omitempty"`
	NewPermissions *NewPermissions   `protobuf:"bytes,7,opt,name=new_permissions,json=newPermissions,proto3" json:"new_permissions,omitempty"`
	Metadata       map[string]string `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NewObjective) Reset() {
	*x = NewObjective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objective_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewObjective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewObjective) ProtoMessage() {}

func (x *NewObjective) ProtoReflect() protoreflect.Message {
	mi := &file_objective_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewObjective.ProtoReflect.Descriptor instead.
func (*NewObjective) Descriptor() ([]byte, []int) {
	return file_objective_proto_rawDescGZIP(), []int{1}
}

func (x *NewObjective) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NewObjective) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewObjective) GetTestDataset() *Dataset {
	if x != nil {
		return x.TestDataset
	}
	return nil
}

func (x *NewObjective) GetDescription() *Addressable {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *NewObjective) GetMetricsName() string {
	if x != nil {
		return x.MetricsName
	}
	return ""
}

func (x *NewObjective) GetMetrics() *Addressable {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *NewObjective) GetNewPermissions() *NewPermissions {
	if x != nil {
		return x.NewPermissions
	}
	return nil
}

func (x *NewObjective) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ObjectiveQueryParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ObjectiveQueryParam) Reset() {
	*x = ObjectiveQueryParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objective_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectiveQueryParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectiveQueryParam) ProtoMessage() {}

func (x *ObjectiveQueryParam) ProtoReflect() protoreflect.Message {
	mi := &file_objective_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectiveQueryParam.ProtoReflect.Descriptor instead.
func (*ObjectiveQueryParam) Descriptor() ([]byte, []int) {
	return file_objective_proto_rawDescGZIP(), []int{2}
}

func (x *ObjectiveQueryParam) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ObjectivesQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objectives    []*Objective `protobuf:"bytes,1,rep,name=objectives,proto3" json:"objectives,omitempty"`
	NextPageToken string       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ObjectivesQueryResponse) Reset() {
	*x = ObjectivesQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objective_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectivesQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectivesQueryResponse) ProtoMessage() {}

func (x *ObjectivesQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_objective_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectivesQueryResponse.ProtoReflect.Descriptor instead.
func (*ObjectivesQueryResponse) Descriptor() ([]byte, []int) {
	return file_objective_proto_rawDescGZIP(), []int{3}
}

func (x *ObjectivesQueryResponse) GetObjectives() []*Objective {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *ObjectivesQueryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ObjectivesQueryParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ObjectivesQueryParam) Reset() {
	*x = ObjectivesQueryParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objective_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectivesQueryParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectivesQueryParam) ProtoMessage() {}

func (x *ObjectivesQueryParam) ProtoReflect() protoreflect.Message {
	mi := &file_objective_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectivesQueryParam.ProtoReflect.Descriptor instead.
func (*ObjectivesQueryParam) Descriptor() ([]byte, []int) {
	return file_objective_proto_rawDescGZIP(), []int{4}
}

func (x *ObjectivesQueryParam) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ObjectivesQueryParam) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type LeaderboardQueryParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectiveKey string    `protobuf:"bytes,1,opt,name=objective_key,json=objectiveKey,proto3" json:"objective_key,omitempty"`
	SortOrder    SortOrder `protobuf:"varint,2,opt,name=sort_order,json=sortOrder,proto3,enum=orchestrator.SortOrder" json:"sort_order,omitempty"`
}

func (x *LeaderboardQueryParam) Reset() {
	*x = LeaderboardQueryParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objective_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardQueryParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardQueryParam) ProtoMessage() {}

func (x *LeaderboardQueryParam) ProtoReflect() protoreflect.Message {
	mi := &file_objective_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardQueryParam.ProtoReflect.Descriptor instead.
func (*LeaderboardQueryParam) Descriptor() ([]byte, []int) {
	return file_objective_proto_rawDescGZIP(), []int{5}
}

func (x *LeaderboardQueryParam) GetObjectiveKey() string {
	if x != nil {
		return x.ObjectiveKey
	}
	return ""
}

func (x *LeaderboardQueryParam) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_ASCENDING
}

// This will probably live somewhere else once we implement test tuple assets
type BoardTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algo          string  `protobuf:"bytes,1,opt,name=algo,proto3" json:"algo,omitempty"`
	Creator       string  `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Key           string  `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	TraintupleKey string  `protobuf:"bytes,4,opt,name=traintuple_key,json=traintupleKey,proto3" json:"traintuple_key,omitempty"`
	Perf          float32 `protobuf:"fixed32,5,opt,name=perf,proto3" json:"perf,omitempty"`
	Tag           string  `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *BoardTuple) Reset() {
	*x = BoardTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objective_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardTuple) ProtoMessage() {}

func (x *BoardTuple) ProtoReflect() protoreflect.Message {
	mi := &file_objective_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardTuple.ProtoReflect.Descriptor instead.
func (*BoardTuple) Descriptor() ([]byte, []int) {
	return file_objective_proto_rawDescGZIP(), []int{6}
}

func (x *BoardTuple) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *BoardTuple) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *BoardTuple) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BoardTuple) GetTraintupleKey() string {
	if x != nil {
		return x.TraintupleKey
	}
	return ""
}

func (x *BoardTuple) GetPerf() float32 {
	if x != nil {
		return x.Perf
	}
	return 0
}

func (x *BoardTuple) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type Leaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objective  *Objective    `protobuf:"bytes,1,opt,name=objective,proto3" json:"objective,omitempty"`
	TestTuples []*BoardTuple `protobuf:"bytes,2,rep,name=test_tuples,json=testTuples,proto3" json:"test_tuples,omitempty"`
}

func (x *Leaderboard) Reset() {
	*x = Leaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objective_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Leaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leaderboard) ProtoMessage() {}

func (x *Leaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_objective_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leaderboard.ProtoReflect.Descriptor instead.
func (*Leaderboard) Descriptor() ([]byte, []int) {
	return file_objective_proto_rawDescGZIP(), []int{7}
}

func (x *Leaderboard) GetObjective() *Objective {
	if x != nil {
		return x.Objective
	}
	return nil
}

func (x *Leaderboard) GetTestTuples() []*BoardTuple {
	if x != nil {
		return x.TestTuples
	}
	return nil
}

var File_objective_proto protoreflect.FileDescriptor

var file_objective_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x03, 0x0a,
	0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x74,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x3b, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xcd, 0x03, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0e, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x27, 0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x7a, 0x0a, 0x17, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x74, 0x0a, 0x15, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x99, 0x01, 0x0a, 0x0a, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x6c, 0x67, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x75, 0x70, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x66, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x65, 0x72, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x7f, 0x0a,
	0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x32, 0xe2,
	0x02, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x1a, 0x17, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x21, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x17, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x12, 0x22, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x25, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x23, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x19, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x77, 0x6b, 0x69, 0x6e, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_objective_proto_rawDescOnce sync.Once
	file_objective_proto_rawDescData = file_objective_proto_rawDesc
)

func file_objective_proto_rawDescGZIP() []byte {
	file_objective_proto_rawDescOnce.Do(func() {
		file_objective_proto_rawDescData = protoimpl.X.CompressGZIP(file_objective_proto_rawDescData)
	})
	return file_objective_proto_rawDescData
}

var file_objective_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_objective_proto_goTypes = []interface{}{
	(*Objective)(nil),               // 0: orchestrator.Objective
	(*NewObjective)(nil),            // 1: orchestrator.NewObjective
	(*ObjectiveQueryParam)(nil),     // 2: orchestrator.ObjectiveQueryParam
	(*ObjectivesQueryResponse)(nil), // 3: orchestrator.ObjectivesQueryResponse
	(*ObjectivesQueryParam)(nil),    // 4: orchestrator.ObjectivesQueryParam
	(*LeaderboardQueryParam)(nil),   // 5: orchestrator.LeaderboardQueryParam
	(*BoardTuple)(nil),              // 6: orchestrator.BoardTuple
	(*Leaderboard)(nil),             // 7: orchestrator.Leaderboard
	nil,                             // 8: orchestrator.Objective.MetadataEntry
	nil,                             // 9: orchestrator.NewObjective.MetadataEntry
	(*Dataset)(nil),                 // 10: orchestrator.Dataset
	(*Addressable)(nil),             // 11: orchestrator.Addressable
	(*Permissions)(nil),             // 12: orchestrator.Permissions
	(*NewPermissions)(nil),          // 13: orchestrator.NewPermissions
	(SortOrder)(0),                  // 14: orchestrator.SortOrder
}
var file_objective_proto_depIdxs = []int32{
	10, // 0: orchestrator.Objective.test_dataset:type_name -> orchestrator.Dataset
	11, // 1: orchestrator.Objective.description:type_name -> orchestrator.Addressable
	11, // 2: orchestrator.Objective.metrics:type_name -> orchestrator.Addressable
	12, // 3: orchestrator.Objective.permissions:type_name -> orchestrator.Permissions
	8,  // 4: orchestrator.Objective.metadata:type_name -> orchestrator.Objective.MetadataEntry
	10, // 5: orchestrator.NewObjective.test_dataset:type_name -> orchestrator.Dataset
	11, // 6: orchestrator.NewObjective.description:type_name -> orchestrator.Addressable
	11, // 7: orchestrator.NewObjective.metrics:type_name -> orchestrator.Addressable
	13, // 8: orchestrator.NewObjective.new_permissions:type_name -> orchestrator.NewPermissions
	9,  // 9: orchestrator.NewObjective.metadata:type_name -> orchestrator.NewObjective.MetadataEntry
	0,  // 10: orchestrator.ObjectivesQueryResponse.objectives:type_name -> orchestrator.Objective
	14, // 11: orchestrator.LeaderboardQueryParam.sort_order:type_name -> orchestrator.SortOrder
	0,  // 12: orchestrator.Leaderboard.objective:type_name -> orchestrator.Objective
	6,  // 13: orchestrator.Leaderboard.test_tuples:type_name -> orchestrator.BoardTuple
	1,  // 14: orchestrator.ObjectiveService.RegisterObjective:input_type -> orchestrator.NewObjective
	2,  // 15: orchestrator.ObjectiveService.QueryObjective:input_type -> orchestrator.ObjectiveQueryParam
	4,  // 16: orchestrator.ObjectiveService.QueryObjectives:input_type -> orchestrator.ObjectivesQueryParam
	5,  // 17: orchestrator.ObjectiveService.GetLeaderboard:input_type -> orchestrator.LeaderboardQueryParam
	0,  // 18: orchestrator.ObjectiveService.RegisterObjective:output_type -> orchestrator.Objective
	0,  // 19: orchestrator.ObjectiveService.QueryObjective:output_type -> orchestrator.Objective
	3,  // 20: orchestrator.ObjectiveService.QueryObjectives:output_type -> orchestrator.ObjectivesQueryResponse
	7,  // 21: orchestrator.ObjectiveService.GetLeaderboard:output_type -> orchestrator.Leaderboard
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_objective_proto_init() }
func file_objective_proto_init() {
	if File_objective_proto != nil {
		return
	}
	file_common_proto_init()
	file_dataset_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_objective_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Objective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objective_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewObjective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objective_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectiveQueryParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objective_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectivesQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objective_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectivesQueryParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objective_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardQueryParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objective_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objective_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Leaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_objective_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_objective_proto_goTypes,
		DependencyIndexes: file_objective_proto_depIdxs,
		MessageInfos:      file_objective_proto_msgTypes,
	}.Build()
	File_objective_proto = out.File
	file_objective_proto_rawDesc = nil
	file_objective_proto_goTypes = nil
	file_objective_proto_depIdxs = nil
}
