{{- if eq .Values.orchestrator.mode "distributed" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "orchestrator.eventForwarder.fullname" . }}
  labels:
    {{- include "orchestrator.eventForwarder.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "orchestrator.eventForwarder.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-env-forwarder.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "orchestrator.eventForwarder.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "orchestrator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: wait-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nc -vz {{ template "rabbitmq.serviceName" . }}.{{ .Release.Namespace }} {{ if $.Values.rabbitmq.auth.tls.enabled }}{{.Values.rabbitmq.service.tlsPort}}{{ else }}{{.Values.rabbitmq.service.port}}{{ end }}; do echo "Waiting for rabbitmq service"; sleep 5; done;']
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.forwarder.image.repository }}:{{ .Values.forwarder.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.forwarder.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          startupProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 30
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ template "orchestrator.eventForwarder.fullname" . }}-env
          env:
           - name: LOG_LEVEL
             value: {{ .Values.orchestrator.logLevel | default "INFO" }}
          volumeMounts:
            - name: fabric-config
              mountPath: /var/hyperledger/fabric-config.yaml
              subPath: fabric-config.yaml
            - name: forwarder-config
              mountPath: /var/hyperledger/forwarder-config.yaml
              subPath: forwarder-config.yaml
            - name: fabric-config
              mountPath: /var/hyperledger/xxx
            - name: user-cert
              mountPath: /var/hyperledger/msp/signcerts
            - name: user-key
              mountPath: /var/hyperledger/msp/keystore
              # subPath: mykey.pem
              # readOnly: true
            - name: peer-tls-server
              mountPath: /var/hyperledger/tls/server/pair
            - name: peer-tls-client
              mountPath: /var/hyperledger/tls/client/pair
            - name: cacert
              mountPath: /var/hyperledger/tls/server/cert/
            - name: data
              mountPath: /var/lib/forwarder
      volumes:
        - name: user-cert
          secret:
            secretName: {{ $.Values.fabric.secrets.user.cert }}
        - name: user-key
          secret:
            secretName: {{ $.Values.fabric.secrets.user.key }}
            # items:
            #  - key: key.pem
            #    path: mykey.pem
        - name: peer-tls-server
          secret:
            secretName: {{ $.Values.fabric.secrets.peer.tls.server }}
        - name: peer-tls-client
          secret:
            secretName: {{ $.Values.fabric.secrets.peer.tls.client }}
        - name: cacert
          secret:
            secretName: {{ $.Values.fabric.secrets.caCert }}
        - name: fabric-config
          configMap:
            name: {{ include "orchestrator.fullname" . }}-fabric
        - name: forwarder-config
          configMap:
            name: {{ include "orchestrator.eventForwarder.fullname" . }}
        {{- if not .Values.forwarder.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- else }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ template "orchestrator.eventForwarder.fullname" . }}-data
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
# if distributed mode
{{- end }}
