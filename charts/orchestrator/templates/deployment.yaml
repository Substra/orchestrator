apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "orchestrator.fullname" . }}
  labels:
    {{- include "orchestrator.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "orchestrator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "orchestrator.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "orchestrator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      {{- if .Values.postgresql.enabled }}
      - name: wait-postgresql
        image: jwilder/dockerize
        command: ['dockerize', '-wait', 'tcp://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}:{{ .Values.postgresql.service.port}}']
      {{- end}}
      - name: wait-rabbitmq
        image: jwilder/dockerize
        command: ['dockerize', '-timeout', '30s', '-wait', 'tcp://{{ .Release.Name }}-rabbitmq.{{ .Release.Namespace }}:{{- if $.Values.rabbitmq.auth.tls.enabled -}}{{.Values.rabbitmq.service.tlsPort}}{{- else -}}{{.Values.rabbitmq.service.port}}{{- end -}}']
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.orchestrator.image.repository }}:{{ .Values.orchestrator.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.orchestrator.image.pullPolicy }}
          ports:
            - name: grpc
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/grpc_health_probe"
                - "-addr=:9000"
               {{- if $.Values.orchestrator.tls.enabled }}
                - "-tls"
                - "-tls-ca-cert=/var/orchestrator/tls/server/cacert/ca.crt"
                - "-tls-server-name={{ include "orchestrator.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
                {{- if $.Values.orchestrator.tls.mtls.enabled }}
                - "-tls-client-key=/var/orchestrator/tls/server/pair/tls.key"
                - "-tls-client-cert=/var/orchestrator/tls/server/pair/tls.crt"
                - "-v"
                {{- end }}
                {{- end }}
          readinessProbe:
            exec:
              command:
                - "/bin/grpc_health_probe"
                - "-addr=:9000"
               {{- if $.Values.orchestrator.tls.enabled }}
                - "-tls"
                - "-tls-ca-cert=/var/orchestrator/tls/server/cacert/ca.crt"
                - "-tls-server-name={{ include "orchestrator.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
                {{- if $.Values.orchestrator.tls.mtls.enabled }}
                - "-tls-client-key=/var/orchestrator/tls/server/pair/tls.key"
                - "-tls-client-cert=/var/orchestrator/tls/server/pair/tls.crt"
                - "-v"
                {{- end }}
                {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
           - name: LOG_LEVEL
             value: {{ .Values.orchestrator.logLevel | default "INFO" }}
           - name: ORCHESTRATOR_AMQP_DSN
             value: amqp://{{.Values.rabbitmq.auth.username}}:{{.Values.rabbitmq.auth.password}}@{{ .Release.Name }}-rabbitmq.{{ .Release.Namespace }}:{{.Values.rabbitmq.service.port}}/
           {{- if .Values.postgresql.enabled }}
           - name: ORCHESTRATOR_DATABASE_URL
             value: postgresql://{{ .Values.postgresql.postgresqlUsername}}:{{ .Values.postgresql.postgresqlPassword}}@{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}:{{ .Values.postgresql.service.port}}/{{ .Values.postgresql.postgresqlDatabase}}?sslmode=disable
           {{- end}}
           - name: ORCHESTRATOR_MODE
             value: {{ .Values.orchestrator.mode }}
           {{- if eq .Values.orchestrator.mode "chaincode" }}
           - name: ORCHESTRATOR_FABRIC_CERT
             value: /var/hyperledger/msp/signcerts/cert.pem
           - name: ORCHESTRATOR_FABRIC_KEY
             value: /var/hyperledger/msp/keystore/key.pem
           - name: ORCHESTRATOR_MSPID
             value: {{ .Values.fabric.mspID }}
           - name: ORCHESTRATOR_NETWORK_CONFIG
             value: /var/hyperledger/fabric-config.yaml
           - name: ORCHESTRATOR_CHAINCODE
             value: {{ .Values.orchestrator.chaincode }}
           {{- end}}
           - name: ORCHESTRATOR_TLS_ENABLED
             value: "{{ $.Values.orchestrator.tls.enabled }}"
           - name: ORCHESTRATOR_MTLS_ENABLED
             value: "{{ and $.Values.orchestrator.tls.enabled $.Values.orchestrator.tls.mtls.enabled }}"
           {{- if $.Values.orchestrator.tls.enabled }}
           - name: ORCHESTRATOR_TLS_CERT_PATH
             value: /var/orchestrator/tls/server/pair/tls.crt
           - name: ORCHESTRATOR_TLS_KEY_PATH
             value: /var/orchestrator/tls/server/pair/tls.key
           {{- if $.Values.orchestrator.tls.mtls.enabled }}
           - name: ORCHESTRATOR_TLS_SERVER_CA_CERT
             value: /var/orchestrator/tls/server/cacert/ca.crt
           - name: ORCHESTRATOR_TLS_CLIENT_CA_CERT_DIR
             value: /var/orchestrator/tls/client/
           {{- end }}
           {{- end }}
           - name: ORCHESTRATOR_VERIFY_CLIENT_MSP_ID
             value: "{{ and $.Values.orchestrator.tls.enabled $.Values.orchestrator.tls.mtls.enabled $.Values.orchestrator.verifyClientMSPID }}"
          volumeMounts:
            {{- if eq .Values.orchestrator.mode "chaincode" }}
            - name: fabric-config
              mountPath: /var/hyperledger/fabric-config.yaml
              subPath: fabric-config.yaml
            - name: fabric-config
              mountPath: /var/hyperledger/xxx
            - name: user-cert
              mountPath: /var/hyperledger/msp/signcerts
            - name: user-key
              mountPath: /var/hyperledger/msp/keystore
            - name: peer-tls-server
              mountPath: /var/hyperledger/tls/server/pair
            - name: peer-tls-client
              mountPath: /var/hyperledger/tls/client/pair
            - name: cacert
              mountPath: /var/hyperledger/tls/server/cert/
            {{- end }}
            {{- if $.Values.orchestrator.tls.enabled }}
            - name: orchestrator-tls-server-pair
              mountPath: /var/orchestrator/tls/server/pair
              readOnly: true
            - name: orchestrator-tls-cacert
              mountPath: /var/orchestrator/tls/server/cacert
              readOnly: true
            {{- if $.Values.orchestrator.tls.mtls.enabled }}
            {{- range $org, $secret := $.Values.orchestrator.tls.mtls.secrets.clientCACerts }}
            - name: orchestrator-tls-client-cacert-{{ $org }}
              mountPath: /var/orchestrator/tls/client/{{ $org }}
              readOnly: true
            {{- end }}
            {{- end }}
            {{- end }}
      volumes:
        {{- if eq .Values.orchestrator.mode "chaincode" }}
        - name: user-cert
          secret:
            secretName: {{ $.Values.fabric.secrets.user.cert }}
        - name: user-key
          secret:
            secretName: {{ $.Values.fabric.secrets.user.key }}
        - name: peer-tls-server
          secret:
            secretName: {{ $.Values.fabric.secrets.peer.tls.server }}
        - name: peer-tls-client
          secret:
            secretName: {{ $.Values.fabric.secrets.peer.tls.client }}
        - name: cacert
          secret:
            secretName: {{ $.Values.fabric.secrets.caCert }}
        - name: fabric-config
          configMap:
            name: {{ include "orchestrator.fullname" . }}-fabric
        {{- end }}
        {{- if $.Values.orchestrator.tls.enabled }}
        - name: orchestrator-tls-cacert
          secret:
            secretName: {{ $.Values.orchestrator.tls.secrets.cacert }}
        - name: orchestrator-tls-server-pair
          secret:
            secretName: {{ $.Values.orchestrator.tls.secrets.pair }}
        {{- if $.Values.orchestrator.tls.mtls.enabled }}
        {{- range $org, $secret := $.Values.orchestrator.tls.mtls.secrets.clientCACerts }}
        - name: orchestrator-tls-client-cacert-{{ $org }}
          secret:
            secretName: {{ $secret }}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
