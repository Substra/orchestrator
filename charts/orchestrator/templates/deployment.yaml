apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "orchestrator.server.fullname" . }}
  labels:
    {{- include "orchestrator.server.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "orchestrator.server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-env-orchestrator.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "orchestrator.server.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "orchestrator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      {{- if .Values.postgresql.enabled }}
      - name: wait-postgresql
        image: busybox
        command: ['sh', '-c', 'until nc -vz {{ template "postgresql.serviceName" . }}.{{ .Release.Namespace }} {{ .Values.postgresql.service.port}}; do echo "Waiting for postgresql service"; sleep 2; done;']
      {{- end}}
      - name: wait-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nc -vz {{ template "rabbitmq.serviceName" . }}.{{ .Release.Namespace }} {{ if $.Values.rabbitmq.auth.tls.enabled }}{{.Values.rabbitmq.service.tlsPort}}{{ else }}{{.Values.rabbitmq.service.port}}{{ end }}; do echo "Waiting for rabbitmq service"; sleep 5; done;']
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "common.images.name" .Values.orchestrator.image }}
          imagePullPolicy: {{ .Values.orchestrator.image.pullPolicy }}
          ports:
            - name: grpc
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/grpc_health_probe"
                - "-addr=:9000"
               {{- if $.Values.orchestrator.tls.enabled }}
                - "-tls"
                - "-tls-ca-cert=/var/orchestrator/tls/server/cacert/ca.crt"
                - "-tls-server-name={{ include "orchestrator.server.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
                {{- if $.Values.orchestrator.tls.mtls.enabled }}
                - "-tls-client-key=/var/orchestrator/tls/server/pair/tls.key"
                - "-tls-client-cert=/var/orchestrator/tls/server/pair/tls.crt"
                - "-v"
                {{- end }}
                {{- end }}
            periodSeconds: 10
            timeoutSeconds: 2
          startupProbe:
            exec:
              command:
                - "/bin/grpc_health_probe"
                - "-addr=:9000"
               {{- if $.Values.orchestrator.tls.enabled }}
                - "-tls"
                - "-tls-ca-cert=/var/orchestrator/tls/server/cacert/ca.crt"
                - "-tls-server-name={{ include "orchestrator.server.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local"
                {{- if $.Values.orchestrator.tls.mtls.enabled }}
                - "-tls-client-key=/var/orchestrator/tls/server/pair/tls.key"
                - "-tls-client-cert=/var/orchestrator/tls/server/pair/tls.crt"
                - "-v"
                {{- end }}
                {{- end }}
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ template "orchestrator.server.fullname" . }}-env
            - secretRef:
                name: {{ template "orchestrator.server.fullname" . }}-secret
          env:
           - name: LOG_LEVEL
             value: {{ .Values.orchestrator.logLevel | default "INFO" }}
           {{- if .Values.metrics.enabled }}
           - name: METRICS_ENABLED
             value: "true"
           {{- end }}
           - name: ORCHESTRATOR_AMQP_PASSWORD
             valueFrom:
               secretKeyRef:
                 {{- if not .Values.rabbitmq.auth.existingPasswordSecret }}
                 name: {{ template "rabbitmq.serviceName" . }}
                 {{- else }}
                 name: {{ .Values.rabbitmq.auth.existingPasswordSecret }}
                 {{- end}}
                 key: rabbitmq-password
           - name: ORCHESTRATOR_AMQP_DSN
             value: amqp://{{.Values.rabbitmq.auth.username}}:$(ORCHESTRATOR_AMQP_PASSWORD)@{{ template "rabbitmq.serviceName" . }}.{{ .Release.Namespace }}:{{.Values.rabbitmq.service.port}}/
          volumeMounts:
            - name: orchestrator-config
              mountPath: /var/orchestrator/config.yaml
              subPath: config.yaml
              readOnly: true
            {{- if eq .Values.orchestrator.mode "distributed" }}
            - name: fabric-config
              mountPath: /var/hyperledger/fabric-config.yaml
              subPath: fabric-config.yaml
            - name: fabric-config
              mountPath: /var/hyperledger/xxx
            - name: user-cert
              mountPath: /var/hyperledger/msp/signcerts
            - name: user-key
              mountPath: /var/hyperledger/msp/keystore
            - name: peer-tls-server
              mountPath: /var/hyperledger/tls/server/pair
            - name: peer-tls-client
              mountPath: /var/hyperledger/tls/client/pair
            - name: cacert
              mountPath: /var/hyperledger/tls/server/cert/
            {{- end }}
            {{- if $.Values.orchestrator.tls.enabled }}
            - name: orchestrator-tls-server-pair
              mountPath: /var/orchestrator/tls/server/pair
              readOnly: true
            - name: orchestrator-tls-cacert
              mountPath: /var/orchestrator/tls/server/cacert
              readOnly: true
            {{- if $.Values.orchestrator.tls.mtls.enabled }}
            {{- range $org, $secret := $.Values.orchestrator.tls.mtls.clientCACerts }}
            - name: orchestrator-tls-client-cacert-{{ kebabcase $org }}
              mountPath: /var/orchestrator/tls/client/{{ $org }}
              readOnly: true
            {{- end }}
            {{- end }}
            {{- end }}
      volumes:
        - name: orchestrator-config
          configMap:
            name: {{ template "orchestrator.server.fullname" . }}-config
            items:
              - key: "config.yaml"
                path: "config.yaml"
        {{- if eq .Values.orchestrator.mode "distributed" }}
        - name: user-cert
          secret:
            secretName: {{ $.Values.fabric.secrets.user.cert }}
        - name: user-key
          secret:
            secretName: {{ $.Values.fabric.secrets.user.key }}
        - name: peer-tls-server
          secret:
            secretName: {{ $.Values.fabric.secrets.peer.tls.server }}
        - name: peer-tls-client
          secret:
            secretName: {{ $.Values.fabric.secrets.peer.tls.client }}
        - name: cacert
          secret:
            secretName: {{ $.Values.fabric.secrets.caCert }}
        - name: fabric-config
          configMap:
            name: {{ include "orchestrator.fullname" . }}-fabric
        {{- end }}
        {{- if $.Values.orchestrator.tls.enabled }}
        - name: orchestrator-tls-cacert
          configMap:
            name: {{ $.Values.orchestrator.tls.cacert }}
        - name: orchestrator-tls-server-pair
          secret:
            secretName: {{ $.Values.orchestrator.tls.secrets.pair }}
        {{- if $.Values.orchestrator.tls.mtls.enabled }}
        {{- range $org, $cacerts := $.Values.orchestrator.tls.mtls.clientCACerts }}
        - name: orchestrator-tls-client-cacert-{{ kebabcase $org }}
          projected:
            sources:
              {{- range $cert := $cacerts }}
              - configMap:
                  name: {{ $cert }}
                  items:
                    - key: ca.crt
                      path: {{ kebabcase $cert }}.crt
              {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
