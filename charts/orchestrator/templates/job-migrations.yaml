{{- if eq .Values.orchestrator.mode "standalone" }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "orchestrator.migrations.fullname" . }}
  labels:
    {{- include "orchestrator.migrations.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: {{ include "orchestrator.migrations.fullname" . }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
      initContainers:
      - name: wait-postgresql
        image: postgres
        command: ['sh', '-c', 'until pg_isready --host={{ template "substra-orc.postgresql.host" . }} --port={{ template "substra-orc.postgresql.port" . }} --dbname={{ .Values.postgresql.auth.database }} --username={{ .Values.postgresql.auth.username }}; do echo "Waiting for postgresql service"; sleep 2; done;']
      containers:
      - name: db-migrations
        image: {{ include "substra-orc.images.name" (dict "img" .Values.orchestrator.image "defaultTag" $.Chart.AppVersion) }}
        command: ['sh', '-c', 'migrate -source file:///migrations/ -database "${ORCHESTRATOR_DATABASE_URL}" up']
        envFrom:
        - secretRef:
            name: {{ template "orchestrator.server.fullname" . }}-secret
{{- end }}
