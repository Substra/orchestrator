# Default values for orchestrator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section Global orchestrator settings
## @param imagePullSecrets Image pull secrets
##
imagePullSecrets: []
## @param nameOverride String to partially override the `orchestrator.fullname`
##
nameOverride: ""
## @param fullnameOverride String to fully override the `orchestrator.fullname`
##
fullnameOverride: ""


serviceAccount:
  ## @param serviceAccount.create Enable creation of a ServiceAccount for the orchestrator pods
  ##
  create: true
  ## @param serviceAccount.annotations Annotations to add to the ServiceAccount
  ##
  annotations: {}
  ## @param serviceAccount.name Name of the created ServiceAccount
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""

## @param podAnnotations Orchestrator pod annotations
##
podAnnotations: {}

## @param podSecurityContext Orchestrator pod security context
##
podSecurityContext: {}
  # fsGroup: 2000

## @param securityContext Orchestrator container security context
##
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


service:
  ## @param service.type Orchestrator service type
  ##
  type: ClusterIP
  ## @param service.port Orchestrator service port
  ##
  port: 9000
  ## @param service.nodePort Orchestrator service port on the node if service type is `NodePort`
  ##
  nodePort: ""


metrics:
  ## @param metrics.enabled Expose Prometheus metrics
  ##
  enabled: false

  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource for scraping metrics using Prometheus Operator
    ##
    enabled: false
    ## @param metrics.serviceMonitor.namespace Namespace for the ServiceMonitor resource (defaults to the Release Namespace)
    ##
    namespace: ""
    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
    ##
    interval: ""
    ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
    ##
    relabelings: []
    ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before insertion
    ##
    metricRelabelings: []
    ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter of the scrape endpoint
    ##
    honorLabels: false


ingress:
  ## @param ingress.enabled Enable ingress for Orchestrator service
  ##
  enabled: false
  ## @param ingress.ingressClassName Ingress class name
  ##
  ingressClassName:
  ## @skip ingress.annotations
  annotations:
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
  ## @param ingress.path path of the deault host
  ##
  path: /
  ## @param ingress.hostname hostname of the default host
  hostname: ""
  ## @param ingress.extraPaths The list of extra paths to be created for the default host
  ## e.g:
  ## extraPaths:
  ##   - path: /
  ##     pathType: ImplementationSpecific
  ##     backend:
  ##       service:
  ##         name: orchestrator-backend-svc
  ##         port:
  ##           name: http
  ##
  extraPaths: []
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.extraHosts The list of additional hostnames to be covered with this ingress record
  ## e.g:
  ## extraHosts:
  ##   - name: chart-example.local
  ##     path: /
  ##     pathType: ImplementationSpecific
  ##
  extraHosts: []
  ## @param ingress.extraTls The tls configuration for hostnames to be coverred by the ingress
  ## e.g:
  ## extraTls:
  ##   - hosts:
  ##       - chart-example.local
  ##     secretName: connect-tls
  ##
  extraTls: []

## @param resources Resource configuration for the `orchestrator` container
##
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## @param nodeSelector Node labels used for pod assignment
##
nodeSelector: {}

## @param tolerations Tolerations labels for pod assignment
##
tolerations: []

## @param affinity Affinity settings for pod assignment
##
affinity: {}

## @section PostgreSQL settings
##
postgresql:
  ## @param postgresql.enabled If true, deploy PostgreSQL
  ##
  enabled: true
  auth:
    ## @param postgresql.auth.enablePostgresUser creates a PostgreSQL user
    ##
    enablePostgresUser: true
    ## @param postgresql.auth.postgresPassword password for the postgres admin user
    ##
    postgresPassword: postgres
    ## @param postgresql.auth.username PostgreSQL user (creates a non-admin user when username is not `postgres`)
    ##
    username: postgres
    ## @param postgresql.auth.password PostgreSQL user password
    ##
    password: postgres
    ## @param postgresql.auth.database PostgreSQL database the orchestrator should use
    ##
    database: orchestrator
  primary:
    ## @param postgresql.primary.extendedConfiguration Extended PostgreSQL configuration (appended to main or default configuration)
    ##
    extendedConfiguration: |-
      tcp_keepalives_idle = 5

## @section Hyperledger Fabric settings
##
fabric:
  ## @param fabric.organization Hyperledger Fabric Peer organization name
  ##
  organization: MyOrg1
  ## @param fabric.mspID Hyperledger Fabric Peer MSP ID
  ##
  mspID: MyOrg1MSP
  ## @param fabric.channels A list of Hyperledger Fabric channels to connect to. See [hlf-k8s](https://github.com/substra/hlf-k8s)
  ##
  channels:
    - mychannel
    - yourchannel
  ## @param fabric.user.name Hyperledger Fabric Peer user name
  ##
  user:
    name: User
  peer:
    ## @param fabric.peer.host Hyperledger Fabric Peer hostname
    ##
    host: network-org-1-peer-1-hlf-peer.org-1.svc.cluster.local
    ## @param fabric.peer.port Hyperledger Fabric Peer port
    ##
    port: 7051
  ## @param fabric.waitForEventTimeoutSeconds Time to wait for confirmation from the Peers that the transaction has been committed
  ##
  waitForEventTimeoutSeconds: 45
  ## @param fabric.logLevel Log level for `fabric-sdk-go`
  ##
  logLevel: INFO
  ## @param fabric.strategy.invoke Chaincode invocation endorsement strategy. Can be `SELF` or `ALL` (request endorsement from all Peers)
  ## @param fabric.strategy.query Chaincode query endorsement strategy. Can be `SELF` or `ALL` (request endorsement from all Peers)
  ##
  strategy:
    invoke: ALL
    query: SELF
  secrets:
    ## @param fabric.secrets.caCert Hyperledger Fabric CA Cert
    ##
    caCert: hlf-cacert
    user:
      ## @param fabric.secrets.user.cert Hyperledger Fabric Peer user certificate
      ##
      cert: hlf-msp-cert-user
      ## @param fabric.secrets.user.key Hyperledger Fabric Peer user certificate key
      ##
      key: hlf-msp-key-user
    peer:
      tls:
        ## @param fabric.secrets.peer.tls.client Hyperledger Fabric Peer TLS client key/cert
        ##
        client: hlf-tls-user
        ## @param fabric.secrets.peer.tls.server Hyperledger Fabric Peer TLS server key/cert
        ##
        server: hlf-tls-admin

# grpcOptions:
#   keepalive:
#     timeMs: 120000
#   maxSendMessageLength: -1
#   maxReceiveMessageLength: -1
#   keepaliveTimeoutMs: 20000
#   http2MaxPingsWithoutData: 0
#   keepalivePermitWithoutCalls: 1


## @section Orchestrator application specific parameters
##
orchestrator:
  image:
    ## @param orchestrator.image.registry `orchestrator` image repository
    ##
    registry: ghcr.io
    ## @param orchestrator.image.repository `orchestrator` image repository
    ##
    repository: substra/orchestrator-server
    ## @param orchestrator.image.pullPolicy `orchestrator` image pull policy
    ##
    pullPolicy: IfNotPresent
    ## @param orchestrator.image.tag `orchestrator` image tag (defaults to AppVersion)
    ##
    tag: null

  ## @param orchestrator.fullnameOverride String to fully override the `orchestrator.server.fullname`
  ##
  fullnameOverride: ""
  ## @param orchestrator.logLevel Orchestrator log level
  ##
  logLevel: INFO
  ## @param orchestrator.logSQLVerbose Log SQL statements with debug verbosity
  ##
  logSQLVerbose: false
  ## @param orchestrator.mode Orchestrator mode, either "standalone" or "distributed"
  ##
  mode: standalone
  ## @param orchestrator.verifyClientMSPID If true, validates incoming gRPC requests by checking the `mspid` header matches the subject organization of the client SSL certificate. See [MSPID check](#MSPID-check)
  ##
  verifyClientMSPID: false
  ## @param orchestrator.txRetryBudget Duration ([go format](https://golang.org/pkg/time/#ParseDuration)) during which the transaction can be retried in case of conflicting writes
  ##
  txRetryBudget: 500ms
  ## @param orchestrator.fabricGatewayTimeout Commit timeout ([go format](https://golang.org/pkg/time/#ParseDuration)) for all transaction submissions for the gateway (only used in distributed mode)
  ##
  fabricGatewayTimeout: 20s

  tls:
    createCertificates:
      ## @param orchestrator.tls.createCertificates.enabled If true creates a cert-manager _Certificate_ resource for the Orchestrator
      ##
      enabled: false
      ## @param orchestrator.tls.createCertificates.domains A list of domains to be covered by the generated certificate
      ##
      domains: []
      ## @param orchestrator.tls.createCertificates.duration TTL of the Orchestrator certificate
      ## Default 90 days
      ##
      duration: 2160h
      ## @param orchestrator.tls.createCertificates.issuer _Issuer_ or _ClusterIssuer_ responsible for the creation of this _Certificate_
      ##
      issuer: ""
      ## @param orchestrator.tls.createCertificates.issuerKind Certificate issuer kind (`Issuer` or `ClusterIssuer`)
      ##
      issuerKind: ClusterIssuer
    ## @param orchestrator.tls.enabled If true, enable TLS for the orchestrator gRPC endpoint
    ##
    enabled: false
    ## @param orchestrator.tls.secrets.pair A secret containing the server TLS cert/key pair `tls.crt` and `tls.key`
    ##
    secrets:
      pair: orchestrator-tls-server-pair
    ## @param orchestrator.tls.cacert A ConfigMap containing the server TLS CA cert `cat.crt`
    ##
    cacert: orchestrator-tls-cacert
    mtls:
      ## @param orchestrator.tls.mtls.enabled If true, enable TLS client verification
      ##
      enabled: false
      ## @param orchestrator.tls.mtls.clientCACerts A map whose keys are names of the CAs, and values are a list of configmaps containing CA certificates
      ## Here you should provide the orchestrator clients ca certs if you are using a private certificate authority
      ## e.g:
      ## orchestrator-ca:
      ##   - orchestrator-tls-cacert
      ##
      clientCACerts: {}

## @section Channels settings
## @param channels List of channels and their members (MSPID)
## e.g:
##  - name: mychannel
##    organizations: [ MyOrg1MSP, MyOrg2MSP ]
##    fabric: # relevant only in distributed mode
##      chaincodes: [ mycc ]
##  - name: yourchannel
##    organizations: [ MyOrg1MSP, MyOrg2MSP ]
##    fabric:
##      chaincodes: [ yourcc ]
##
channels: []


## @section migration job settings
migrations:
  ## @param migrations.fullnameOverride String to fully override the `migrations.server.fullname`
  ##
  fullnameOverride: ""
